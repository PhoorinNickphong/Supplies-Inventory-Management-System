import React, { useState, useEffect } from "react";
import "./Report-LowStock.css";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

function ReportLowStock() {
  const allData = [
    ["3M Scotch ‡πÄ‡∏ó‡∏õ‡∏Å‡∏≤‡∏ß‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏£‡∏á‡∏¢‡∏∂‡∏î‡∏™‡∏π‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏™ 19 ‡∏°‡∏°.*4‡∏°.", "‡∏°‡πâ‡∏ß‡∏ô", 1, 1, 220.0],
    ["Elfen ‡∏•‡∏¥‡πâ‡∏ô‡πÅ‡∏ü‡πâ‡∏°‡πÇ‡∏•‡∏´‡∏∞‡∏™‡∏µ‡∏ó‡∏≠‡∏á", "‡∏Å‡∏•‡πà‡∏≠‡∏á", 2, 2, 132.0],
    ["One Whiteboard Marker ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "‡∏î‡πâ‡∏≤‡∏°", 1, 1, 17.5],
    ["Pentel ‡∏ä‡∏∏‡∏î‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î", "‡∏ä‡∏∏‡∏î", 1, 1, 55.0],
    ["POST-IT ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÇ‡∏ô‡πâ‡∏ï ‡∏Ç‡∏ô‡∏≤‡∏î 3*3 ‡∏ô‡∏¥‡πâ‡∏ß", "‡∏Å‡πâ‡∏≠‡∏ô", 5, 5, 150.0],
    ["Quantum ‡∏¢‡∏≤‡∏á‡∏•‡∏ö", "‡∏≠‡∏±‡∏ô", 2, 2, 44.0],
    ["Scotch ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Å‡∏≤‡∏ß‡∏¢‡πà‡∏ô ‡πÅ‡∏Å‡∏ô 3‡∏ô‡∏¥‡πâ‡∏ß 36‡∏°‡∏°.x20‡∏´‡∏•‡∏≤ ‡∏™‡∏µ‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏°‡πâ‡∏ß‡∏ô", 5, 5, 200.0],
    ["Tape Cassette ‡πÄ‡∏ó‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏•‡∏≤‡∏Å", "‡∏≠‡∏±‡∏ô", 2, 2, 900.0],
    ["Whiteboard Monomi ‡∏™‡∏µ‡πÅ‡∏î‡∏á", "‡∏î‡πâ‡∏≤‡∏°", 1, 1, 17.5],
    ["Whiteboard Monomi ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "‡∏î‡πâ‡∏≤‡∏°", 1, 1, 17.5],
  ];

  const itemsPerPage = 10;
  const [currentPage, setCurrentPage] = useState(1);
  const [inputPage, setInputPage] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const filteredData = allData.filter((row) =>
    row[0].toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const displayedData = filteredData.slice(indexOfFirstItem, indexOfLastItem);

  useEffect(() => {
    setInputPage("");
  }, [currentPage]);

  const exportToExcel = () => {
    const header = [["‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏", "‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏¢‡∏≠‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"]];
    const rows = filteredData.map((row) => [
      row[0],
      row[1],
      row[2],
      row[3],
      Math.round(row[4]) // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    ]);
    const wsData = [...header, ...rows];

    const worksheet = XLSX.utils.aoa_to_sheet(wsData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥");

    const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
    const file = new Blob([excelBuffer], { type: "application/octet-stream" });
    saveAs(file, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥.xlsx");
  };

  return (
    <div className="report-lowstock-container">
      <div className="report-lowstock-controls">
        <div className="report-lowstock-search-group">
          <label>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</label>
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="report-lowstock-export-wrapper">
          <button onClick={exportToExcel} className="report-lowstock-export-btn" title="Export Excel">
            <img src="/image/excel-icon.png" alt="Export" className="excel-icon" />
            <span>Export Excel</span>
          </button>
        </div>
      </div>

      <table className="report-lowstock-table">
        <thead>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏</th>
            <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
            <th>‡∏¢‡∏≠‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</th>
            <th>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
            <th>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°</th>
          </tr>
        </thead>
        <tbody>
          {displayedData.map((row, index) => (
            <tr key={index}>
              {row.map((cell, i) => (
                <td key={i}>
                  {typeof cell === "number"
                    ? Math.round(cell).toLocaleString() // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                    : cell}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>

      <div className="report-lowstock-pagination-wrapper">
        <div className="report-lowstock-pagination-info">
          ‡πÅ‡∏™‡∏î‡∏á {indexOfFirstItem + 1} ‡∏ñ‡∏∂‡∏á {Math.min(indexOfLastItem, filteredData.length)} ‡∏à‡∏≤‡∏Å {filteredData.length} ‡πÅ‡∏ñ‡∏ß
        </div>
        <div className="report-lowstock-pagination-buttons">
          <button
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(currentPage - 1)}
          >
            ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          </button>

          <input
            type="number"
            className="report-lowstock-page-input"
            value={inputPage}
            min={1}
            max={totalPages}
            onFocus={() => setInputPage("")}
            onChange={(e) => setInputPage(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                const val = parseInt(inputPage.trim(), 10);
                if (!isNaN(val) && val >= 1 && val <= totalPages) {
                  setCurrentPage(val);
                }
                e.target.blur();
              }
            }}
            placeholder={`${currentPage} / ${totalPages}`}
          />

          <button
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(currentPage + 1)}
          >
            ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </button>
        </div>
      </div>
    </div>
  );
}

export default ReportLowStock;
