import { useState, useEffect } from "react";
import axios from "axios";
import "./StuffBasket_Popup.css";
import { API_URL } from "../../config";
import Swal from "sweetalert2";

// ‚úÖ Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏

const StuffBasket_Popup = ({
  basketItems = [], // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
  setBasketItems = () => {}, // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï basketItems
  onClose, // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î popup
  onCancel, // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  onSuccess, // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
}) => {
  // ‚úÖ ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const totalQty = basketItems.reduce((sum, i) => sum + i.quantity, 0);
  const totalPrice = basketItems.reduce(
    (sum, i) => sum + (i.quantity * i.price || 0),
    0
  );

  // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [purpose, setPurpose] = useState(""); // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const [supervisor, setSupervisor] = useState(""); // ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
  const [userFullName, setUserFullName] = useState(""); // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏à‡∏≤‡∏Å localStorage)
  const [department, setDepartment] = useState(""); // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
  const [userId, setUserId] = useState(null); // ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showCancelSuccess, setShowCancelSuccess] = useState(false);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("user"));
    if (user) {
      setUserFullName(user.full_name);
      setUserId(user.id);
    }
  }, []);

useEffect(() => {
  if (!showCancelSuccess) return;

  const timeout = setTimeout(() => {
    Swal.fire({
      title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      text: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
      icon: "success",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
    });
    setShowCancelSuccess(false);
  }, 300);

  return () => clearTimeout(timeout);
}, [showCancelSuccess]);



  const handleCancel = () => {
  Swal.fire({
    title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    text: "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    cancelButtonText: "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ",
  }).then((result) => {
    if (result.isConfirmed) {
      onClose();        // ‚úÖ ‡∏õ‡∏¥‡∏î popup
      onCancel();       // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      setShowCancelSuccess(true); // ‚úÖ ‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    }
  });
};



  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
  const handleConfirm = async () => {
    if (isSubmitting) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥

    setIsSubmitting(true); // üîí ‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥

    const payload = {
      created_by: userId,
      reason: purpose,
      total_amount: parseFloat(totalPrice.toFixed(2)),
      Admin_status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      User_status: "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á",
      items: basketItems.map((item) => ({
        material_id: item.id,
        quantity: item.quantity,
        total_price: parseFloat((item.quantity * item.price).toFixed(2)),
      })),
    };

    try {
      const res = await axios.post(
        `${API_URL}/stuff_materials/add_stuff_materials.php`,
        payload
      );
      if (res.data.status === "success") {
        onSuccess?.();
        setBasketItems([]); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á basketItems
        onClose(); // ‚úÖ ‡∏õ‡∏¥‡∏î popup React ‡∏Å‡πà‡∏≠‡∏ô

        setTimeout(() => {
          Swal.fire({
            title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            text: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏´‡∏±‡∏™: ${res.data.running_code})`,
            icon: "success",
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          });
        }, 200); // ‚úÖ ‡∏£‡∏≠ popup ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      } else {
        Swal.fire({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: res.data.message,
          icon: "error",
          confirmButtonText: "‡∏õ‡∏¥‡∏î",
        });
      }
    } catch (error) {
      console.error("API error:", error);
      Swal.fire({
        title: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    } finally {
      setIsSubmitting(false); // ‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å
    }
  };

  return (
    <div className="stuff-basket-popup-overlay">
      <div className="stuff-basket-popup">
        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß popup */}
        <div className="stuff-basket-popup-header">
          <span className="stuff-basket-popup-title">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
          <button className="stuff-basket-popup-close" onClick={onClose}>
            √ó
          </button>
        </div>

        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div className="stuff-basket-popup-body">
          <div className="stuff-basket-popup-info-grid">
            <div>
              <label>‡∏ä‡∏∑‡πà‡∏≠</label>
              <input type="text" value={userFullName} readOnly />
            </div>
            <div>
              <label>‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</label>
              <input
                type="text"
                value={department}
                onChange={(e) => setDepartment(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î"
              />
            </div>
            <div>
              <label>‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</label>
              <input
                type="text"
                value={`${basketItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`}
                readOnly
              />
            </div>
            <div>
              <label>‡∏Ñ‡∏•‡∏±‡∏á</label>
              <input type="text" value="‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á" readOnly />
            </div>
            <div>
              <label>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</label>
              <input
                type="text"
                value={purpose}
                onChange={(e) => setPurpose(e.target.value)}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
              />
            </div>
            <div>
              <label>‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô</label>
              <input
                type="text"
                value={supervisor}
                onChange={(e) => setSupervisor(e.target.value)}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô"
              />
            </div>
          </div>

          {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
          <div className="stuff-basket-popup-table-section">
            <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏</h3>
            <div className="stuff-basket-popup-table-scroll">
              <table className="stuff-basket-popup-material-table">
                <thead>
                  <tr>
                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö</th>
                    <th>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤</th>
                  </tr>
                </thead>
                <tbody>
                  {basketItems.map((item, index) => (
                    <tr key={item.id}>
                      <td>{index + 1}</td>
                      <td>{item.name}</td>
                      <td>
                        {item.quantity} {item.unit}
                      </td>
                      <td>{(item.quantity * item.price).toFixed(2)} ‡∏ö‡∏≤‡∏ó</td>
                    </tr>
                  ))}
                  {/* ‚úÖ ‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏° */}
                  <tr>
                    <td colSpan="2">‡∏£‡∏ß‡∏°</td>
                    <td>{totalQty} ‡∏´‡∏ô‡πà‡∏ß‡∏¢</td>
                    <td>{totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å */}
        <div className="stuff-basket-popup-footer">
          <button
            className="stuff-basket-popup-cancel-btn"
            onClick={handleCancel}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
          <button
            className="stuff-basket-popup-confirm-btn"
            onClick={handleConfirm}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
        </div>
      </div>
    </div>
  );
};

export default StuffBasket_Popup;
